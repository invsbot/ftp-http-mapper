{"version":3,"sources":["components/TabPanel.tsx","pages/ParserPage.tsx","App.tsx","index.tsx"],"names":["props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","ParserPage","useState","formParams","setFormParams","maxSizePage","setMaxSizePage","parsedUrls","setParsedUrls","minSizePage","setMinSizePage","handleSubmit","event","a","preventDefault","Object","keys","length","fetch","mode","method","headers","body","JSON","stringify","response","json","urlArray","console","log","handleChangePassword","target","name","React","tabPanelPosition","setValue","renderListItems","data","List","map","val","ListItem","button","href","url","pageName","variant","noWrap","Grid","className","justify","direction","lg","sm","xl","onSubmit","TextField","fullWidth","required","onChange","label","type","Button","color","Tabs","newValue","centered","Tab","wrapped","TabPanel","reduce","acc","pageItem","Number","pageSize","App","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.26af47c5.chunk.js","sourcesContent":["import { Typography, Box } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default (props: any) => {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <Typography\r\n        component=\"div\"\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`full-width-tabpanel-${index}`}\r\n        aria-labelledby={`full-width-tab-${index}`}\r\n        {...other}\r\n      >\r\n        <Box p={3}>{children}</Box>\r\n      </Typography>\r\n    );\r\n  }","import React, { FormEvent, useState, ChangeEvent } from 'react';\r\nimport { TextField, Button , Grid, List, Tabs, Tab, ListItem, ListItemText, Typography  }  from '@material-ui/core';\r\nimport TabPanel from '../components/TabPanel';\r\n\r\nimport * as H from 'history';\r\n\r\nimport './styles.scss';\r\ninterface ParserPageProps {\r\n    history: H.History;\r\n}\r\n\r\ntype SizePageType = {\r\n    pageSize: string;\r\n    pageName: string;\r\n}\r\n\r\ntype FormParamsType = {\r\n    [key: string]: string;\r\n}\r\n\r\nconst ParserPage: React.FC<ParserPageProps> = () => {\r\n\r\n    const [formParams, setFormParams] = useState({} as FormParamsType);\r\n\r\n    const [maxSizePage, setMaxSizePage] = useState({} as SizePageType);\r\n    const [parsedUrls, setParsedUrls] = useState<SizePageType[]>([]);\r\n    const [minSizePage, setMinSizePage] = useState({} as SizePageType);\r\n\r\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        if(Object.keys(formParams).length !== 2)\r\n            return;\r\n\r\n        try{\r\n            const response = await fetch('http://localhost:8080/mapper', \r\n            {   mode: 'no-cors',\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(formParams)\r\n            });\r\n            const json = await response.json();\r\n            setMaxSizePage(json.maxSizePage);\r\n            setParsedUrls(json.urlArray);\r\n            setMinSizePage(json.minSizePage);\r\n        }\r\n        catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const handleChangePassword = (event: ChangeEvent<HTMLInputElement> ) => {\r\n        setFormParams({...formParams, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    const [tabPanelPosition, setValue] = React.useState('one');\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\r\n      setValue(newValue);\r\n    };\r\n\r\n    const renderListItems = (data: SizePageType[]) => {\r\n        return(\r\n            <List>\r\n            {data.map(val => \r\n            <>\r\n                <ListItem button component=\"a\" target=\"_blank\" href={`${formParams.url}/${val.pageName}`}>\r\n                    <Typography variant=\"inherit\" noWrap>\r\n                        {val.pageName}\r\n                    </Typography>\r\n                </ListItem>\r\n            </> )}\r\n        </List>\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <Grid className=\"container\" justify=\"space-between\" direction=\"column\" lg={5} sm={5} xl={6}>\r\n            <h2 className=\"container__title\">Построение карты сайта</h2>\r\n            <form className=\"submit__form\" onSubmit={handleSubmit}>\r\n                <TextField \r\n                    fullWidth \r\n                    required\r\n                    className=\"submit__input\" \r\n                    onChange={handleChangePassword} \r\n                    name=\"url\" id=\"urlInput\" \r\n                    label=\"Введите ссылку:\" \r\n                    variant=\"standard\" \r\n                />\r\n                <TextField \r\n                    type=\"number\"\r\n                    required\r\n                    fullWidth \r\n                    className=\"submit__input\" \r\n                    onChange={handleChangePassword} \r\n                    name=\"deep\" id=\"deepLevelInput\" \r\n                    label=\"Введите уровень вложенности:\" \r\n                    variant=\"standard\" \r\n                />\r\n                <Button \r\n                    className=\"submit__button\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    Построить\r\n                </Button>\r\n            </form>\r\n            {parsedUrls.length > 0 && \r\n            <>\r\n                <Tabs value={tabPanelPosition} onChange={handleChange} centered>\r\n                    <Tab\r\n                        value=\"one\"\r\n                        label={`Все страницы: ${parsedUrls.length}`}\r\n                        wrapped\r\n                    />\r\n                    <Tab value=\"two\" label=\"Максимальная\" />\r\n                    <Tab value=\"three\" label=\"Минимальная\" />\r\n                </Tabs>\r\n                <TabPanel value={tabPanelPosition} index=\"one\">\r\n                    <p className=\"page-size-count\">Общее количество: {parsedUrls.reduce((acc, pageItem) => acc + Number(pageItem.pageSize), 0)}</p>\r\n                    {renderListItems(parsedUrls)}\r\n                </TabPanel>\r\n                <TabPanel value={tabPanelPosition} index=\"two\">\r\n                    {renderListItems([maxSizePage])}\r\n                </TabPanel>\r\n                <TabPanel value={tabPanelPosition} index=\"three\">\r\n                    {renderListItems([minSizePage])}\r\n                </TabPanel>\r\n            </>\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\nexport default ParserPage;","import React from 'react';\nimport { Router, Switch, Route, BrowserRouter } from 'react-router-dom';\nimport ParserPage from './pages/ParserPage';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <BrowserRouter>\n        <Switch>\n          <Route\n            path=\"/\"\n            render={(props) => <ParserPage {...props} />}\n          />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}